println("Branch name: ${BRANCH_NAME}")

switch(BRANCH_NAME) {
  case "test.deploy":
    aws_region="us-east-1"
    region="info"
    cloud_front_distribution_id="E3DCOH2ZTE42J5"
    site_url="https://testnew-helpcenter.onlyoffice.com/" 
    cms="https://cmshelpcenter.teamlab.info"
    break
  case "production.deploy111":
    aws_region="us-east-1"
    region="com"
    MONITOR_ID = '8888888888888'
    cloud_front_distribution_id="9999999999"
    site_url="https://testnew-helpcenter.onlyoffice.com/"
    cms="https://cmshelpcenter.teamlab.info"
    break
  default:
    println("Branch: ${BRANCH_NAME} do not for deploy.")
    break
}

pipeline {
  agent { label 'ubuntu' }
  triggers {
    githubPush()
  }
  options {
    disableConcurrentBuilds()
    buildDiscarder (logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
  }
  stages {
    stage('stop_monitor') {
      when { branch 'production_deploy' }
      steps {
        build job: 'monitor.24x7.start.stop', 
          parameters: [string(name: 'monitor_id', value: "${MONITOR_ID}"), 
          string(name: 'action', value: 'suspend')]
      }    
    }
    
    stage('deploy') {
      when { 
        anyOf { branch 'test.deploy';
                branch 'production_deploy' }
      }
      environment {
        region = "${region}"
        cms="${cms}"
      }
      steps {
        sh '''
        
          sed -i "s^config_cms^$cms^" config/config.json
      
          tar -czpf .jenkins/helpcenter.tar.gz \
            --exclude ".git" \
            --exclude ".gitignore" \
            --exclude ".jenkins" \
            --exclude "README.md" .
          
          echo "Deploy from ${BRANCH_NAME} is starting."
        '''
        
        sshPublisher(publishers: [sshPublisherDesc(configName: "strapi_oforms@${region}", 
          transfers: [sshTransfer(cleanRemote: false, 
            excludes: '', 
            execCommand: '''
              sudo bash /home/ubuntu/deploy/.jenkins/build.sh |& tee -a > /home/ubuntu/deploy/helpcenter_deploy.log
            ''', 
            execTimeout: 600000, 
            flatten: false, 
            makeEmptyDirs: false, 
            noDefaultExcludes: false, 
            patternSeparator: '[, ]+', 
            remoteDirectory: '', 
            remoteDirectorySDF: false, 
            removePrefix: '', 
            sourceFiles: '.jenkins/helpcenter.tar.gz,.jenkins/build.sh')], 
          usePromotionTimestamp: false, 
          useWorkspaceInPromotion: false, 
          verbose: false)])
      }
    }
    stage('invalidation') {
      when { 
        anyOf { branch 'test.deploy';
                branch 'production_deploy' }
      }
      environment {
        aws_region = "${aws_region}"
        cloud_front_distribution_id = "${cloud_front_distribution_id}"
      }
      steps {
        withCredentials([
                usernamePassword(credentialsId: 'aws_build_robot', 
                passwordVariable: 'secret_key', 
                usernameVariable: 'access_key')]) {
          sh '''
            export AWS_ACCESS_KEY_ID="$access_key"
            export AWS_SECRET_ACCESS_KEY="$secret_key"
            export AWS_DEFAULT_aws_region="$aws_region"
            
            echo "=== start invalidation ==="
            aws cloudfront create-invalidation --distribution-id ${cloud_front_distribution_id} --paths "/*" || \
            aws cloudfront create-invalidation --distribution-id ${cloud_front_distribution_id} --paths "/*"
          '''
        }
      }
    }
    
    stage('start_monitor') {
      when { branch 'production_deploy' }
      steps {
        build job: 'monitor.24x7.start.stop', 
          parameters: [string(name: 'monitor_id', value: "${MONITOR_ID}"), 
          string(name: 'action', value: 'activate')]
      }    
    }
  }
}